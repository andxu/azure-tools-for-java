/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.hdinsight.sdk.rest.azure.serverless.spark.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Spark specific resource pool information.
 */
public class SparkResourcePoolProperties {
    /**
     * Version of the template used while deploying the resource pool.
     */
    @JsonProperty(value = "resourcePoolVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String resourcePoolVersion;

    /**
     * Spark version to be deployed on the instances of the resource pool.
     */
    @JsonProperty(value = "sparkVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String sparkVersion;

    /**
     * ADLS directory path to store Spark events and logs.
     */
    @JsonProperty(value = "sparkEventsDirectoryPath")
    private String sparkEventsDirectoryPath;

    /**
     * The sparkResourceCollection property.
     */
    @JsonProperty(value = "sparkResourceCollection", access = JsonProperty.Access.WRITE_ONLY)
    private List<SparkResourcePoolItemProperties> sparkResourceCollection;

    /**
     * Stte of the Activity. Possible values include: 'New', 'Queued',
     * 'Scheduling', 'Starting', 'Launching', 'Running', 'Rediscovering',
     * 'Ending', 'Ended'.
     */
    @JsonProperty(value = "state")
    private ResourcePoolState state;

    /**
     * Definition of Spark Uri Collection.
     */
    @JsonProperty(value = "sparkUriCollection", access = JsonProperty.Access.WRITE_ONLY)
    private SparkResourcePoolUriItemProperties sparkUriCollection;

    /**
     * Get the resourcePoolVersion value.
     *
     * @return the resourcePoolVersion value
     */
    public String resourcePoolVersion() {
        return this.resourcePoolVersion;
    }

    /**
     * Get the sparkVersion value.
     *
     * @return the sparkVersion value
     */
    public String sparkVersion() {
        return this.sparkVersion;
    }

    /**
     * Get the sparkEventsDirectoryPath value.
     *
     * @return the sparkEventsDirectoryPath value
     */
    public String sparkEventsDirectoryPath() {
        return this.sparkEventsDirectoryPath;
    }

    /**
     * Set the sparkEventsDirectoryPath value.
     *
     * @param sparkEventsDirectoryPath the sparkEventsDirectoryPath value to set
     * @return the SparkResourcePoolProperties object itself.
     */
    public SparkResourcePoolProperties withSparkEventsDirectoryPath(String sparkEventsDirectoryPath) {
        this.sparkEventsDirectoryPath = sparkEventsDirectoryPath;
        return this;
    }

    /**
     * Get the sparkResourceCollection value.
     *
     * @return the sparkResourceCollection value
     */
    public List<SparkResourcePoolItemProperties> sparkResourceCollection() {
        return this.sparkResourceCollection;
    }

    /**
     * Get the state value.
     *
     * @return the state value
     */
    public ResourcePoolState state() {
        return this.state;
    }

    /**
     * Set the state value.
     *
     * @param state the state value to set
     * @return the SparkResourcePoolProperties object itself.
     */
    public SparkResourcePoolProperties withState(ResourcePoolState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the sparkUriCollection value.
     *
     * @return the sparkUriCollection value
     */
    public SparkResourcePoolUriItemProperties sparkUriCollection() {
        return this.sparkUriCollection;
    }

}
